    //sched_yield();
        //fsync( (*fd) );

#if 0
    //To confirm whether blocking/non-blocking
    fcntl(fd, F_SETFL, fcntl(fd, F_GETFL) | O_NONBLOCK); //Make FIFO non-blocking
    //fcntl(fd, F_SETFL, fcntl(fd, F_GETFL) & ~O_NONBLOCK); //Make FIFO blocking
    printf("FD is blocking (0)/non-blocking(>1)=%d\n", (fcntl(fd, F_GETFL) & O_NONBLOCK));

    //To change PIPE_SZ (changed to 4096 bytes)
    printf("FIFO current pipe size = %d\n", fcntl(fd, F_GETPIPE_SZ, sizeof(size_t)));
    fcntl(fd, F_SETPIPE_SZ, QDT_PIPE_SZ);
    printf("FIFO changed pipe size = %d\n", fcntl(fd, F_GETPIPE_SZ, sizeof(size_t)));
#endif
#
#    // To change RLIMIT_FSIZE to 1 byte
    /*struct rlimit *newp = NULL;
    struct rlimit new, old;:w

    new.rlim_cur = 1;
    new.rlim_max = 1;
    newp = &new;

    // Set CPU time limit of target process; retrieve and display previous limit
    if (prlimit(pid, RLIMIT_FSIZE, newp, &old) == -1)
    {
      errExit("prlimit-1");
    }
    else
    {
       printf("Previous limits: soft=%lld; hard=%lld\n",
              (long long) old.rlim_cur, (long long) old.rlim_max);
    }*/

